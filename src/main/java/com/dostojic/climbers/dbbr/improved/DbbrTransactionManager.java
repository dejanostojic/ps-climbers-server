/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dostojic.climbers.dbbr.improved;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Dejan.Ostojic
 */
public class DbbrTransactionManager {

    final private static ThreadLocal<DbbrTransactionManager> THREAD_LOCAL_MANAGER = new ThreadLocal<>();
    // we can have connection factory injected but it is out of scope 
    public final static HikariDataSource DS; // TODO: WARNING THIS IS PUBLIC ONLY FOR DB UNIT! FIX THIS!

    private Connection connection = null;

    static {
        try{
            String propsFile = System.getProperty("hikariConfig", "/hikariConfig.properties");
            HikariConfig config = new HikariConfig(propsFile);
            DS = new HikariDataSource(config);
        } catch (Exception e){
            e.printStackTrace();
            throw e;
        }
    }

    private DbbrTransactionManager() {
    }

    public static DbbrTransactionManager getCurrent() {
        DbbrTransactionManager instance = THREAD_LOCAL_MANAGER.get();
        if (instance == null) {
            instance = new DbbrTransactionManager();
            THREAD_LOCAL_MANAGER.set(instance);
        }
        return instance;
    }
    
    /**
     * Get connection from data source and bind it to current thread
     * thread
     *
     * @throws SQLException
     */
    public void bindConnection() throws SQLException {
        try {
            if (connection == null) {
                connection = DS.getConnection();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            throw ex; // TOOD: Wrap in wrapper or retrow
        }
    }

    /**
     * Start transaction. Get connection from data source and bind it to current
     * thread
     *
     * @throws Exception
     */
    public void startTransaction() throws Exception {
        bindConnection();
        connection.setAutoCommit(false);
    }

    /**
     * Commit transaction and clear from current thread.
     *
     * @throws Exception
     */
    public void commit() throws Exception {
        throwIfNoConnInThread("Can not rollback.");
        throwIfAutoCommit("Can not explicitly commit auto commit connection!");

        try {
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            throw ex;
        } finally {
            closeConnAndRemoveFromThread();
        }
    }
    
    /**
     * Rollback current transaction and clear from current thread.
     *
     * @throws Exception
     */
    public void rollback() throws Exception {
        throwIfNoConnInThread("Can not rollback. Transaction is not started!");
        throwIfAutoCommit("Can not rollback auto commit connection!");
        
        try {
            connection.rollback();
        } catch (SQLException ex) {
            ex.printStackTrace();
            throw ex;
        } finally {
            closeConnAndRemoveFromThread();
        }

    }
    
    /**
     * Create statement from current thread.
     * Client should close statement when done with it!
     *
     * @throws Exception
     */
    public Statement createStatement() throws Exception {
        throwIfNoConnInThread("Can not create statement. Not in persistance context!");
        return connection.createStatement();
    }

    /**
     * Create PreparedStatement from current thread.
     * Client should close statement when done with it!
     *
     * @throws Exception
     */    
    public PreparedStatement prepareStatement(String sql) throws Exception {
        throwIfNoConnInThread("Can not prepare statement. Not in persistance context!");
        return connection.prepareStatement(sql);
    }

    /**
     * Create PreparedStatement from current thread.
     * Client should close statement when done with it!
     * 
     * @param autoGeneratedKeys a flag indicating whether auto-generated keys
     *        should be returned; one of
     *        <code>Statement.RETURN_GENERATED_KEYS</code> or
     *        <code>Statement.NO_GENERATED_KEYS</code>
     * @throws Exception
     */    
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws Exception {
        throwIfNoConnInThread("Can not prepare statement. Not in persistance context!");
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }

    private void throwIfNoConnInThread(String exceptionMessage) throws Exception {
        if (connection == null) {
            throw new Exception(exceptionMessage + " Not in persistance context. There is no connection available for this thread!");
        }
        if (connection.isClosed()){
            throw new Exception(exceptionMessage + " Transaction is not started!");
        }
    }

    private void throwIfAutoCommit(String errorMsg) throws Exception {
        if (connection.getAutoCommit() == true) {
            throw new Exception(errorMsg);
        }
    }
    
    public void closeConnAndRemoveFromThread(){
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
            }
            connection = null;
        }
    }
}
